import React, { useState } from 'react';
import Layout from '@theme/Layout';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';

import ReactSelect from 'react-select';
export const Select = ({ onChange, name, ...props }) => {
  const patchedOnChange = (value) => {
    onChange({ currentTarget: { value, name }});
  }
  return <ReactSelect onChange={patchedOnChange} name={name} {...props} />
}

import asset from '../../static/vulnerability-report/asset';
import weakness from '../../static/vulnerability-report/vulnerability';
import severity from '../../static/vulnerability-report/severity';

function ReportBug() {
  const context = useDocusaurusContext();
  const {siteConfig = {}} = context;
  const [assetValue, setAsset] = useState(null);
  const [weaknessValue, setWeakness] = useState(null);
  const [severityValue, setSeverity] = useState(null);


  const handleSubmit = event => {
    event.preventDefault();
    if (!assetValue) {
      alert('Please, select Attack surface.');
      return;
    }
    if (!weaknessValue) {
      alert('Please, define at least one Weakness.');
      return;
    }
    if (!severityValue) {
      alert('Please, select Severity.');
      return;
    }

    const weaknesses = (weaknessValue.map(function(weakness) { return '* [' + weakness.type.toUpperCase() + '-' + weakness.code + '](https://' + weakness.type + '.mitre.org/data/definitions/' + weakness.code + '.html)' })).join('\n');
    const message = '### Asset\n' + assetValue.value + '\n### Version\n' + version.value + '\n### Weakness\n' + weaknesses + '\n### Severity\n' + severityValue.value + '\n### Report\n';
    const link = 'mailto:' + siteConfig.customFields.securitymail.mail + '?subject=' + encodeURI('Vulnerability Report [' + severityValue.value + ']') + '&body=' + encodeURI(message);
    window.location.href = link;
  }

  return (
    <Layout
      title={`Vulnerability report - ${siteConfig.title}`}
      description={`Vulnerability report - ${siteConfig.tagline}`}>
      <header className="hero hero--primary">
        <div className="container">
          <p className="hero__subtitle">Vulnerability report</p>
          <p>
            This form will open your email application and pre-fill data.
          </p>
          <p>
            Please, sign and encrypt your message with following key: <a id="key" className="white" href={siteConfig.customFields.securitymail.keylink} download={ 'Core Blockchain Security (' + siteConfig.customFields.securitymail.keyid + ').asc' } target="_blank">ðŸ”‘ {siteConfig.customFields.securitymail.keyid}</a><br />
            If you want receive encrypted reply, please, attach your key as well.
          </p>
        </div>
      </header>
      <main className="container">
        <div className="vulnerabilityPost">
          <div>
            <form className="bug-report" onSubmit={handleSubmit}>
              <fieldset>
                <legend>Asset</legend>
                <label className="asset" htmlFor="asset">Attack surface</label>
                <Select
                  id="asset"
                  name="asset"
                  value={assetValue}
                  onChange={e => setAsset(e.currentTarget.value)}
                  className="rselect"
                  classNamePrefix="rselect"
                  options={asset}
                  defaultValue={asset[0]}
                  autoFocus
                  getOptionLabel={ option => `${option.name}` }
                  placeholder="Select asset" />
              </fieldset>
              <fieldset>
                <legend>Version</legend>
                <label className="version" htmlFor="version">ver.</label>
                <input type="text" name="version" id="version" className="form-control full-width" value="latest" disabled required />
              </fieldset>
              <fieldset>
                <legend>Weakness</legend>
                <div>
                  <Select
                    id="weakness"
                    name="weakness"
                    value={weaknessValue}
                    onChange={e => setWeakness(e.currentTarget.value)}
                    className="rselect"
                    classNamePrefix="rselect"
                    options={weakness}
                    placeholder="Select weakness"
                    openMenuOnFocus
                    hideSelectedOptions
                    loadingMessage="Loading CWE list"
                    getOptionLabel={ option => `${option.name} [${option.type.toUpperCase()}-${option.code}]` }
                    getOptionValue={ option => `${option.type.toUpperCase()}-${option.code}` }
                    isMulti />
                </div>
              </fieldset>
              <fieldset>
                <legend>Severity</legend>
                <Select
                  id="severity"
                  name="severity"
                  className="rselect"
                  classNamePrefix="rselect"
                  value={severityValue}
                  onChange={e => setSeverity(e.currentTarget.value)}
                  options={severity}
                  defaultValue={severity[0]}
                  getOptionLabel={ option => `${option.name}` }
                  placeholder="Select severity" />
              </fieldset>
              <fieldset>
                <legend>Encryption key</legend>
                <div><a href={siteConfig.customFields.securitymail.keylink} download={ 'Core Blockchain Security (' + siteConfig.customFields.securitymail.keyid + ').asc' } target="_blank">key ðŸ”‘ {siteConfig.customFields.securitymail.keyid}</a></div>
              </fieldset>
              <button className="button button--primary button--outline button--lg" type="submit">Open email App and compose Report</button>
            </form>
          </div>
        </div>
      </main>
    </Layout>
  );
}

export default ReportBug;
